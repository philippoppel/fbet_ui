generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// *
/// * ─────────────────────────
/// *
/// * MODELS
/// *
/// * ─────────────────────────
model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String?
  createdAt         DateTime           @default(now()) @map("created_at")
  isActive          Boolean            @default(true) @map("is_active")
  hashedPassword    String             @map("hashed_password")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  commentLikes      CommentLike[]
  comments          EventComment[]
  createdEvents     Event[]            @relation("EventCreator")
  groupMemberships  GroupMembership[]
  createdGroups     Group[]            @relation("GroupCreator")
  leadershipStreaks LeadershipStreak[]
  pushSubscriptions PushSubscription[]
  tips              Tip[]

  @@map("users")
}

model Group {
  id                Int                @id @default(autoincrement())
  name              String
  description       String?
  inviteToken       String?            @unique @map("invite_token")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  createdById       Int                @map("created_by_id")
  imageUrl          String?            @map("image_url")
  events            Event[]
  memberships       GroupMembership[]
  creator           User               @relation("GroupCreator", fields: [createdById], references: [id])
  leadershipStreaks LeadershipStreak[]

  @@map("groups")
}

model GroupMembership {
  id       Int      @id @default(autoincrement())
  joinedAt DateTime @default(now()) @map("joined_at")
  userId   Int      @map("user_id")
  groupId  Int      @map("group_id")
  group    Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId], name: "uq_user_group")
  @@map("group_memberships")
}

model Event {
  id              Int            @id @default(autoincrement())
  title           String
  description     String?
  question        String
  options         Json
  winningOption   String?        @map("winning_option")
  eventDateTime   DateTime?      @map("event_datetime")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  groupId         Int            @map("group_id")
  createdById     Int            @map("created_by_id")
  tippingDeadline DateTime?      @map("tipping_deadline")
  hasWildcard     Boolean        @default(false) @map("has_wildcard")
  wildcardType    WildcardType?  @map("wildcard_type")
  wildcardPrompt  String?        @map("wildcard_prompt")
  wildcardAnswer  String?        @map("wildcard_answer")
  comments        EventComment[]
  creator         User           @relation("EventCreator", fields: [createdById], references: [id])
  group           Group          @relation(fields: [groupId], references: [id], onDelete: Cascade)
  tips            Tip[]

  @@map("events")
}

model Tip {
  id             Int      @id @default(autoincrement())
  selectedOption String   @map("selected_option")
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  eventId        Int      @map("event_id")
  userId         Int      @map("user_id")
  points         Int?
  wildcardGuess  String?  @map("wildcard_guess")
  wildcardPoints Int      @default(0) @map("wildcard_points")
  event          Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId], name: "unique_tip_per_user_per_event")
  @@map("tips")
}

model EventComment {
  id         Int           @id @default(autoincrement())
  text       String?
  gifUrl     String?       @map("gif_url")
  createdAt  DateTime      @default(now()) @map("created_at")
  userId     Int           @map("user_id")
  eventId    Int           @map("event_id")
  updatedAt  DateTime      @updatedAt @map("updated_at")
  likesCount Int           @default(0) @map("likes_count")
  likes      CommentLike[]
  event      Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user       User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("event_comments")
}

model CommentLike {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now()) @map("created_at")
  userId    Int          @map("user_id")
  commentId Int          @map("comment_id")
  comment   EventComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId], name: "uq_user_comment_like")
  @@map("comment_likes")
}

model LeadershipStreak {
  id             Int       @id @default(autoincrement())
  groupId        Int       @map("group_id")
  userId         Int       @map("user_id")
  becameLeaderOn DateTime  @map("became_leader_on")
  ended_on       DateTime?
  group          Group     @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId, becameLeaderOn], name: "uq_group_user_streak_start")
  @@index([groupId, ended_on], map: "idx_group_active_streak")
  @@map("leadership_streaks")
}

model PushSubscription {
  id        String   @id @default(cuid())
  endpoint  String   @unique
  p256dh    String
  auth      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("push_subscriptions")
}

/// *
/// * ─────────────────────────
/// *
/// * ENUMS
/// *
/// * ─────────────────────────
enum WildcardType {
  EXACT_SCORE
  ROUND_FINISH
  GENERIC
}
